var contentImport = {};
var g = $G;

contentImport.data = {
    result: null,
};
contentImport.init = function (opt, callbacks) {
    addUploadButtonListener();
    addOkListener();
};

function processWord(file) {
    $('.file-tip').html('正在转换Word文件，请稍后...');
    $('.file-result').html('').hide();
    var reader = new FileReader();
    reader.onload = function (loadEvent) {
        mammoth.convertToHtml({
            arrayBuffer: loadEvent.target.result
        })
            .then(function displayResult(result) {
                $('.file-tip').html('转换成功');
                contentImport.data.result = result.value;
                $('.file-result').html(result.value).show();
            }, function (error) {
                $('.file-tip').html('Word文件转换失败:' + error);
            });
    };
    reader.onerror = function (loadEvent) {
        $('.file-tip').html('Word文件转换失败:' + loadEvent);
    };
    reader.readAsArrayBuffer(file);
}

function processMarkdown(markdown) {
    // 第一步：处理代码块，保护它们不被当作公式处理
    var codeBlocks = [];
    var codeBlockIndex = 0;
    var processedMarkdown = markdown;
    
    // 不再使用占位符方式处理代码块，而是直接将代码块转换为HTML格式
    
    // 匹配带有语言标识的代码块: ```python、```javascript等
    processedMarkdown = processedMarkdown.replace(/```(\w*)\s*\n([\s\S]*?)```/g, function(match, language, code) {
        var lang = language.trim() || detectCodeLanguage(code.trim());
        return '<pre><code class="language-' + lang + '">' + 
               code.trim().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;') + 
               '</code></pre>';
    });
    
    // 匹配不带语言标识的代码块
    processedMarkdown = processedMarkdown.replace(/```([\s\S]*?)```/g, function(match, code) {
        var lang = detectCodeLanguage(code.trim());
        return '<pre><code class="language-' + lang + '">' + 
               code.trim().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;') + 
               '</code></pre>';
    });
    
    // 第二步：使用Showdown转换markdown为HTML
    var converter = new showdown.Converter({
        tables: true,         // 启用表格支持
        strikethrough: true,  // 启用删除线
        tasklists: true,      // 支持任务列表
        simpleLineBreaks: true, // 简单换行
        emoji: true,          // 支持emoji
        literalMidWordUnderscores: true, // 支持单词内的下划线
        parseImgDimensions: true, // 支持图片尺寸
        omitExtraWLInCodeBlocks: true, // 在代码块中省略额外的换行符
        ghCodeBlocks: true,   // 使用GitHub风格的代码块
        customizedHeaderId: true, // 自定义标题ID
        disableForced4SpacesIndentedSublists: true, // 禁用强制四个空格缩进的子列表
        requireSpaceBeforeHeadingText: true, // 标题文本前需要空格
        smartIndentationFix: true // 智能缩进修复
    });
    
    // 设置代码块的定制化处理
    converter.setOption('ghCodeBlocks', true);
    converter.setOption('customCodeBlockHandler', function(code, language) {
        return '<pre><code class="language-' + (language || 'plaintext') + '">' + 
               code.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;') + 
               '</code></pre>';
    });
    
    // 页面上的MathJax配置支持$ $也支持\( \)格式，所以我们先将所有公式转换为$ $格式
    // 这样处理我们可以让Showdown正常处理Markdown，而公式部分不会被讨匀
    
    // 处理原生的\[ ... \]格式的公式（可能跨多行）
    processedMarkdown = processedMarkdown.replace(/\\\[([\s\S]*?)\\\]/g, function(match, formula) {
        return '$$' + formula + '$$';
    });
    
    // 将方括号内的LaTeX公式转换为$$..$$格式
    // 注意这里的正则使用[\s\S]*?来匹配包括换行在内的任意字符
    processedMarkdown = processedMarkdown.replace(/\[([\s\S]*?)\]/g, function(match, formula) {
        // 只有当括号中的内容包含公式特性的内容才进行转换
        if (formula.indexOf('\\beta') !== -1 || 
            formula.indexOf('\\frac') !== -1 || 
            formula.indexOf('_') !== -1 || 
            formula.indexOf('^') !== -1 || 
            formula.indexOf('\\epsilon') !== -1 ||
            formula.indexOf('\\left') !== -1 ||
            formula.indexOf('\\right') !== -1 ||
            formula.indexOf('\\cdots') !== -1) {
            return '$$' + formula + '$$';
        }
        return match; // 如果不是公式，保持原样
    });
    
    // 转换Markdown为HTML
    var html = converter.makeHtml(processedMarkdown);
    
    // 直接使用标准HTML的pre和code标签替换Markdown代码块
    // 这样可以完全避免Showdown转换器对代码块的处理
    
    // 保存原始的Markdown内容以便调试
    var originalMarkdown = processedMarkdown;
    
    // 转换Markdown为HTML
    var html = converter.makeHtml(processedMarkdown);
    
    // 处理HTML中可能存在的代码块问题
    // 对于代码块，我们需要重新从原始的Markdown中提取并直接插入到HTML中
    
    // 存储所有代码块的数组
    var extractedCodeBlocks = [];
    
    // 提取带有语言标识的代码块
    var codeBlockRegex1 = /```(\w*)\s*\n([\s\S]*?)```/g;
    var match1;
    while ((match1 = codeBlockRegex1.exec(originalMarkdown)) !== null) {
        extractedCodeBlocks.push({
            language: match1[1].trim(),
            code: match1[2].trim(),
            fullMatch: match1[0]
        });
    }
    
    // 提取不带语言标识的代码块
    var codeBlockRegex2 = /```([\s\S]*?)```/g;
    var match2;
    while ((match2 = codeBlockRegex2.exec(originalMarkdown)) !== null) {
        // 检查是否已经匹配过这个代码块
        var alreadyMatched = false;
        for (var i = 0; i < extractedCodeBlocks.length; i++) {
            if (extractedCodeBlocks[i].fullMatch === match2[0]) {
                alreadyMatched = true;
                break;
            }
        }
        
        if (!alreadyMatched) {
            extractedCodeBlocks.push({
                language: "",
                code: match2[1].trim(),
                fullMatch: match2[0]
            });
        }
    }
    
    // 将每个代码块转换为HTML并插入到最终的HTML中
    for (var i = 0; i < extractedCodeBlocks.length; i++) {
        var block = extractedCodeBlocks[i];
        var language = block.language || detectCodeLanguage(block.code);
        
        // 将处理后的HTML插入到编辑器中
        var codeHtml = '<pre><code class="language-' + language + '">' + 
                       block.code.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;') + 
                       '</code></pre>';
        
        // 在HTML中查找代码块的位置
        var blockText = block.fullMatch.replace(/[\[\]\(\)\{\}\*\+\?\^\$\\]/g, '\\$&');
        var blockRegex = new RegExp('<p>(\\s*' + blockText + '\\s*)<\/p>', 'g');
        
        // 替换代码块
        html = html.replace(blockRegex, codeHtml);
        
        // 如果上面的替换没有成功，尝试其他可能的匹配方式
        if (html.indexOf(block.fullMatch) !== -1) {
            html = html.replace(block.fullMatch, codeHtml);
        }
        
        // 如果还是没有成功，尝试匹配可能的HTML转义形式
        var escapedBlock = block.fullMatch.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        if (html.indexOf(escapedBlock) !== -1) {
            html = html.replace(escapedBlock, codeHtml);
        }
    }
    
    // 处理可能存在的各种特殊格式的代码块
    
    // 1. 处理可能存在的CODEBLOCK_格式或~CODEBLOCK_PLACEHOLDER_格式
    html = html.replace(/(?:CODEBLOCK_\d+|~+CODEBLOCK_PLACEHOLDER_\d+~+)/g, function(match) {
        // 将其替换为标准代码块
        return '<pre><code class="language-plaintext">// 代码块内容</code></pre>';
    });
    
    // 2. 处理可能存在的CODE_0, CODE_1等格式
    html = html.replace(/<pre\s+class=["']code(\d+)["']>([\s\S]*?)<\/pre>/g, function(match, codeNum, content) {
        // 检测代码语言
        var language = detectCodeLanguage(content);
        
        // 创建标准的代码块
        return '<pre><code class="language-' + language + '">' + 
               content.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;') + 
               '</code></pre>';
    });
    
    // 3. 处理可能存在的已转换的代码块（如果已经被转换为<pre><code>格式）
    html = html.replace(/<pre><code>([\s\S]*?)<\/code><\/pre>/g, function(match, content) {
        // 检测代码语言
        var language = detectCodeLanguage(content);
        
        // 创建标准的代码块
        return '<pre><code class="language-' + language + '">' + 
               content.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;') + 
               '</code></pre>';
    });
    
    // 4. 处理可能存在的```代码块格式
    html = html.replace(/<p>```(\w*)\s*<br\s*\/?>([\s\S]*?)```<\/p>/g, function(match, language, code) {
        // 检测代码语言
        var lang = language.trim() || detectCodeLanguage(code.trim());
        
        // 创建标准的代码块
        return '<pre><code class="language-' + lang + '">' + 
               code.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/<br\s*\/?>/g, '\n') + 
               '</code></pre>';
    });
    
    // 第四步：添加MathJax配置，与网站现有配置保持一致
    var mathjaxConfig = '<script type="text/javascript">\n' +
        'window.MathJax = {\n' +
        '  tex: {\n' +
        '    inlineMath: [["$", "$"], ["\\\\(", "\\\\)"]],\n' +
        '    displayMath: [["$$", "$$"], ["\\\\[", "\\\\]"]],\n' +
        '    processEscapes: true,\n' +
        '    processEnvironments: true\n' +
        '  },\n' +
        '  options: {\n' +
        '    ignoreHtmlClass: "tex2jax_ignore",\n' +
        '    processHtmlClass: "tex2jax_process"\n' +
        '  },\n' +
        '  startup: {\n' +
        '    ready: function() {\n' +
        '      MathJax.startup.defaultReady();\n' +
        '    }\n' +
        '  }\n' +
        '};\n' +
        '</script>\n';
    
    // 添加MathJax脚本支持，使用与网站相同的版本和渲染器
    var mathjaxSupport = mathjaxConfig +
        '<script type="text/javascript" id="MathJax-script" async ' +
        'src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>';
    
    // 添加表格样式
    var styles = '<style>\n' +
        'table {border-collapse: collapse; width: 100%; margin: 10px 0;}\n' +
        'table, th, td {border: 1px solid #ddd;}\n' +
        'th, td {padding: 8px; text-align: left;}\n' +
        'th {background-color: #f2f2f2;}\n' +
        '</style>\n';
    
    // 特别为网站添加的公式处理脚本
    var specialMathJaxScript = '<script>\n' +
        'setTimeout(function() {\n' +
        '  // 获取文章内容元素\n' +
        '  const contentElement = document.getElementById(\'content\');\n' +
        '  if (!contentElement) return;\n' +
        '  \n' +
        '  // 获取HTML内容\n' +
        '  let html = contentElement.innerHTML;\n' +
        '  \n' +
        '  // 使用正则表达式处理多行公式\n' +
        '  // 注意这里的s标志可以匹配多行内容\n' +
        '  html = html.replace(/\\[([\\s\\S]*?)\\]/gs, function(match, formula) {\n' +
        '    // 只有当括号中的内容包含公式特性的内容才进行转换\n' +
        '    if (formula.indexOf(\'\\\\beta\') !== -1 || \n' +
        '        formula.indexOf(\'\\\\frac\') !== -1 || \n' +
        '        formula.indexOf(\'_\') !== -1 || \n' +
        '        formula.indexOf(\'^\') !== -1 || \n' +
        '        formula.indexOf(\'\\\\epsilon\') !== -1 ||\n' +
        '        formula.indexOf(\'\\\\left\') !== -1 ||\n' +
        '        formula.indexOf(\'\\\\right\') !== -1 ||\n' +
        '        formula.indexOf(\'\\\\cdots\') !== -1) {\n' +
        '      return \'$$\' + formula + \'$$\';\n' +
        '    }\n' +
        '    return match; // 如果不是公式，保持原样\n' +
        '  });\n' +
        '  \n' +
        '  // 更新内容\n' +
        '  contentElement.innerHTML = html;\n' +
        '  \n' +
        '  // 重新渲染数学公式\n' +
        '  MathJax && MathJax.typeset && MathJax.typeset();\n' +
        '}, 500);\n' +
        '</script>';
        
    // 添加代码语言检测函数
    function detectCodeLanguage(code) {
        // 默认为普通文本
        var language = 'plaintext';
        
        // 简单的语言检测逻辑
        if (code.match(/^\s*(import|from|def|class|if __name__)/m)) {
            language = 'python';
        } else if (code.match(/^\s*(function|const|let|var|import from|export|=>)/m)) {
            language = 'javascript';
        } else if (code.match(/^\s*(public class|private|protected|void|static|@Override)/m)) {
            language = 'java';
        } else if (code.match(/^\s*(#include|int main|std::)/m)) {
            language = 'cpp';
        } else if (code.match(/^\s*(<html|<!DOCTYPE|<head|<body|<div|<script)/m)) {
            language = 'html';
        } else if (code.match(/^\s*(body|margin|padding|font-size|color:|background:)/m)) {
            language = 'css';
        } else if (code.match(/^\s*(SELECT|INSERT|UPDATE|DELETE|CREATE TABLE)/im)) {
            language = 'sql';
        } else if (code.match(/^\s*(package|import|func|type|struct)/m)) {
            language = 'go';
        } else if (code.match(/^\s*(\{|\[)\s*"[^"]+"\s*:/m)) {
            language = 'json';
        }
        
        return language;
    }
    
    html = styles + html + mathjaxSupport + specialMathJaxScript;
                           '    var content = block.innerHTML; ' +
                           '    var language = "plaintext"; ' +
                           '    ' +
                           '    // 语言检测逻辑' +
                           '    if (content.match(/^\\s*(import|from|def|class)/)) language = "python"; ' +
                           '    else if (content.match(/^\\s*(function|const|let|var)/)) language = "javascript"; ' +
                           '    else if (content.match(/^\\s*(#include|int main)/)) language = "cpp"; ' +
                           '    else if (content.match(/^\\s*(public class|private|protected)/)) language = "java"; ' +
                           '    else if (content.match(/^\\s*(<html|<!DOCTYPE)/)) language = "html"; ' +
                           '    else if (content.match(/^\\s*(body|margin|padding|font-size)/)) language = "css"; ' +
                           '    else if (content.match(/^\\s*(SELECT|INSERT|UPDATE|DELETE)/i)) language = "sql"; ' +
                           '    ' +
                           '    // 创建新的code元素并设置语言类' +
                           '    var codeEl = document.createElement("code"); ' +
                           '    codeEl.className = "language-" + language; ' +
                           '    codeEl.innerHTML = content; ' +
                           '    ' +
                           '    // 替换原来的内容' +
                           '    block.innerHTML = ""; ' +
                           '    block.appendChild(codeEl); ' +
                           '    ' +
                           '    // 移除code类名并添加标准类名' +
                           '    block.className = ""; ' +
                           '    ' +
                           '    // 高亮代码块' +
                           '    hljs.highlightBlock(codeEl); ' +
                           '  }); ' +
                           '  ' +
                           '  // 处理可能存在的其他类型的代码块' +
                           '  document.querySelectorAll("pre:not(:has(code))").forEach(block => { ' +
                           '    if (block.className && !block.className.includes("language-")) {' +
                           '      var content = block.innerHTML; ' +
                           '      var language = "plaintext"; ' +
                           '      ' +
                           '      // 语言检测逻辑' +
                           '      if (content.match(/^\\s*(import|from|def|class)/)) language = "python"; ' +
                           '      else if (content.match(/^\\s*(function|const|let|var)/)) language = "javascript"; ' +
                           '      else if (content.match(/^\\s*(#include|int main)/)) language = "cpp"; ' +
                           '      ' +
                           '      var codeEl = document.createElement("code"); ' +
                           '      codeEl.className = "language-" + language; ' +
                           '      codeEl.innerHTML = content; ' +
                           '      block.innerHTML = ""; ' +
                           '      block.appendChild(codeEl); ' +
                           '      hljs.highlightBlock(codeEl); ' +
                           '    }' +
                           '  }); ' +
                           '});</script>';
    
    html = styles + html + mathjaxSupport + highlightSupport + specialMathJaxScript;
    
    // 添加额外的代码块样式
    html += '<style>' +
            'pre { background-color: #f6f8fa; border-radius: 3px; padding: 16px; overflow: auto; }' +
            'pre code { background: transparent; padding: 0; }' +
            'table { border-collapse: collapse; width: 100%; margin-bottom: 16px; }' +
            'table th, table td { border: 1px solid #dfe2e5; padding: 6px 13px; }' +
            'table th { background-color: #f6f8fa; }' +
            '</style>';
    
    $('.file-tip').html('转换成功');
    contentImport.data.result = html;
    $('.file-result').html(html).show();
    
    // 初始化MathJax渲染
    if (window.MathJax) {
        try {
            window.MathJax.typesetPromise && window.MathJax.typesetPromise();
        } catch(e) {
            console.error('MathJax渲染失败:', e);
        }
    }
}

function processMarkdownFile(file) {
    $('.file-tip').html('正在转换Markdown文件，请稍后...');
    $('.file-result').html('').hide();
    var reader = new FileReader();
    reader.onload = function (loadEvent) {
        // 加载MathJax脚本以支持数学公式
        if (!window.MathJax) {
            // 加载MathJax配置和脚本
            var configScript = document.createElement('script');
            configScript.type = 'text/javascript';
            configScript.text = 'window.MathJax = {' +
                'tex: {' +
                '  inlineMath: [["\\\\(", "\\\\)"]],' +
                '  displayMath: [["\\\\[", "\\\\]"]],' +
                '  processEscapes: true,' +
                '  processEnvironments: true,' +
                '  macros: {' +
                '    beta: "\\\\beta",' +
                '    epsilon: "\\\\epsilon",' +
                '    hat: ["\\\\hat{#1}", 1]' +
                '  }' +
                '},' +
                'options: {' +
                '  ignoreHtmlClass: "tex2jax_ignore",' +
                '  processHtmlClass: "tex2jax_process"' +
                '},' +
                'startup: {' +
                '  ready: function() {' +
                '    MathJax.startup.defaultReady();' +
                '  }' +
                '}' +
              '};';
            document.head.appendChild(configScript);
            
            $.getScript('https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js', function() {
                processMarkdown(loadEvent.target.result);
            });
        } else {

// ...

function addOkListener() {
    dialog.onok = function () {
        if (!contentImport.data.result) {
            alert('请先上传文件识别内容');
            return false;
        }
        
        // 内容已经包含样式，直接插入
        var content = contentImport.data.result;
        
        // 检查是否已包含MathJax，如果不包含则添加
        if (content.indexOf('MathJax-script') === -1) {
            // 添加MathJax配置和脚本，使用与网站相同的配置
            var mathjaxConfig = '<script type="text/javascript">\n' +
                'window.MathJax = {\n' +
                '  tex: {\n' +
                '    inlineMath: [["$", "$"], ["\\\\(", "\\\\)"]],\n' +
                '    displayMath: [["$$", "$$"], ["\\\\[", "\\\\]"]],\n' +
                '    processEscapes: true,\n' +
                '    processEnvironments: true\n' +
                '  },\n' +
                '  options: {\n' +
                '    ignoreHtmlClass: "tex2jax_ignore",\n' +
                '    processHtmlClass: "tex2jax_process"\n' +
                '  },\n' +
                '  startup: {\n' +
                '    ready: function() {\n' +
                '      MathJax.startup.defaultReady();\n' +
                '    }\n' +
                '  }\n' +
                '};\n' +
                '</script>\n';
            
            var mathjaxScript = '<script type="text/javascript" id="MathJax-script" async ' +
                'src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>';
                            // 特别为网站添加的公式处理脚本，处理方括号内的公式
            var specialMathJaxScript = '<script>\n' +
                'setTimeout(function() {\n' +
                '  var contentElement = document.getElementById(\'content\');\n' +
                '  if (!contentElement) {\n' +
                '    contentElement = document.querySelector(\'.ueditor-content\');\n' +
                '  }\n' +
                '  if (!contentElement) return;\n' +
                '  \n' +
                '  let html = contentElement.innerHTML;\n' +
                '  \n' +
                '  // 使用正则表达式处理多行公式\n' +
                '  // 注意这里的s标志可以匹配多行内容\n' +
                '  html = html.replace(/\\[([\\s\\S]*?)\\]/gs, function(match, formula) {\n' +
                '    // 只有当括号中的内容包含公式特性的内容才进行转换\n' +
                '    if (formula.indexOf(\'\\\\beta\') !== -1 || \n' +
                '        formula.indexOf(\'\\\\frac\') !== -1 || \n' +
                '        formula.indexOf(\'_\') !== -1 || \n' +
                '        formula.indexOf(\'^\') !== -1 || \n' +
                '        formula.indexOf(\'\\\\epsilon\') !== -1 ||\n' +
                '        formula.indexOf(\'\\\\left\') !== -1 ||\n' +
                '        formula.indexOf(\'\\\\right\') !== -1 ||\n' +
                '        formula.indexOf(\'\\\\cdots\') !== -1) {\n' +
                '      return \'$$\' + formula + \'$$\';\n' +
                '    }\n' +
                '    return match; // 如果不是公式，保持原样\n' +
                '  });\n' +
                '  \n' +
                '  contentElement.innerHTML = html;\n' +
                '  \n' +
                '  MathJax && MathJax.typeset && MathJax.typeset();\n' +
                '}, 500);\n' +
                '</script>';
                
            content = mathjaxConfig + content + mathjaxScript + specialMathJaxScript;
        }
        
        editor.fireEvent('saveScene');
        editor.execCommand("inserthtml", content);
        editor.fireEvent('saveScene');
        
        // 重新初始化MathJax渲染，以确保公式正确显示
        if (window.MathJax) {
            setTimeout(function() {
                try {
                    // MathJax 3.x
                    if (window.MathJax && window.MathJax.typeset) {
                        window.MathJax.typeset();
                        
                        // 额外处理方括号中的公式
                        var contentElement = document.getElementById('content');
                        if (!contentElement) {
                            contentElement = document.querySelector('.ueditor-content');
                        }
                        if (contentElement) {
                            var html = contentElement.innerHTML;
                            // 使用正则表达式处理多行公式
                            html = html.replace(/\[([\s\S]*?)\]/gs, function(match, formula) {
                                // 只有当括号中的内容包含公式特性的内容才进行转换
                                if (formula.indexOf('\\beta') !== -1 || 
                                    formula.indexOf('\\frac') !== -1 || 
                                    formula.indexOf('_') !== -1 || 
                                    formula.indexOf('^') !== -1 || 
                                    formula.indexOf('\\epsilon') !== -1 ||
                                    formula.indexOf('\\left') !== -1 ||
                                    formula.indexOf('\\right') !== -1 ||
                                    formula.indexOf('\\cdots') !== -1) {
                                    return '$$' + formula + '$$';
                                }
                                return match; // 如果不是公式，保持原样
                            });                            
                            contentElement.innerHTML = html;
                            window.MathJax.typeset();
                        }
                        console.log('MathJax渲染成功');
                    } 
                    // MathJax 2.x
                    else if (window.MathJax && window.MathJax.Hub) {
                        window.MathJax.Hub.Queue(["Typeset", window.MathJax.Hub]);
                    }
                } catch(e) {
                    console.error('MathJax初始化或渲染失败:', e);
                }
            }, 1000); // 增加延时确保内容已加载
        }
    };
    dialog.oncancel = function () {
    };
}
